diff --git a/clang/CMakeLists.txt b/clang/CMakeLists.txt
index f7936d72e..57ede82da 100644
--- a/clang/CMakeLists.txt
+++ b/clang/CMakeLists.txt
@@ -167,6 +167,21 @@ endif()
 include(CheckIncludeFile)
 check_include_file(sys/resource.h CLANG_HAVE_RLIMITS)
 
+set(CLANG_SYSTEM_C_INCLUDE_DIRS "" CACHE STRING
+  "Colon separated list of directories clang will search for C headers. If non-empty, Clang will not search default locations.")
+
+set(CLANG_SYSTEM_CXX_INCLUDE_DIRS "" CACHE STRING
+  "Colon separated list of directories clang will search for C++ headers. If non-empty, Clang will not search default locations.")
+
+set(CLANG_SYSTEM_LIBRARY_DIRS "" CACHE STRING
+  "Colon separated list of directories clang will search for standard libraries. If non-empty, Clang will not search default locations.")
+
+set(CLANG_COMPILER_RT_ROOT "" CACHE STRING
+  "Root of compiler-rt installation, empty for platform default.")
+
+set(CLANG_DYNAMIC_LINKER "" CACHE STRING
+  "Dynamic linker to use, empty for platform default.")
+
 set(CLANG_RESOURCE_DIR "" CACHE STRING
   "Relative directory from the Clang binary to its resource files.")
 
diff --git a/clang/include/clang/Config/config.h.cmake b/clang/include/clang/Config/config.h.cmake
index a54a26cd3..5c81c6ab2 100644
--- a/clang/include/clang/Config/config.h.cmake
+++ b/clang/include/clang/Config/config.h.cmake
@@ -77,4 +77,19 @@
 /* Spawn a new process clang.exe for the CC1 tool invocation, when necessary */
 #cmakedefine01 CLANG_SPAWN_CC1
 
+/* Colon separated list of directories clang will search for C headers. If non-empty, Clang will not search default locations. */
+#define CLANG_SYSTEM_C_INCLUDE_DIRS "${CLANG_SYSTEM_C_INCLUDE_DIRS}"
+
+/* Colon separated list of directories clang will search for C++ headers. If non-empty, Clang will not search default locations. */
+#define CLANG_SYSTEM_CXX_INCLUDE_DIRS "${CLANG_SYSTEM_CXX_INCLUDE_DIRS}"
+
+/* Colon separated list of directories clang will search for standard libraries. If non-empty, Clang will not search default locations. */
+#define CLANG_SYSTEM_LIBRARY_DIRS "${CLANG_SYSTEM_LIBRARY_DIRS}"
+
+/* Root of compiler-rt installation, empty for platform default. */
+#define CLANG_COMPILER_RT_ROOT "${CLANG_COMPILER_RT_ROOT}"
+
+/* Dynamic linker to use, empty for platform default. */
+#define CLANG_DYNAMIC_LINKER "${CLANG_DYNAMIC_LINKER}"
+
 #endif
diff --git a/clang/lib/Driver/ToolChain.cpp b/clang/lib/Driver/ToolChain.cpp
index 8dafc3d48..a636a78d6 100644
--- a/clang/lib/Driver/ToolChain.cpp
+++ b/clang/lib/Driver/ToolChain.cpp
@@ -595,6 +595,14 @@ StringRef ToolChain::getOSLibName() const {
 }
 
 std::string ToolChain::getCompilerRTPath() const {
+  // Check for configure-time compiler-rt path.
+  StringRef ClangCompilerRTRoot(CLANG_COMPILER_RT_ROOT);
+  if (ClangCompilerRTRoot != "") {
+    SmallString<128> Path(ClangCompilerRTRoot);
+    llvm::sys::path::append(Path, "lib", getOSLibName());
+    return std::string(Path);
+  }
+
   SmallString<128> Path(getDriver().ResourceDir);
   if (isBareMetal()) {
     llvm::sys::path::append(Path, "lib", getOSLibName());
@@ -722,6 +730,18 @@ ToolChain::path_list ToolChain::getRuntimePaths() const {
 
 ToolChain::path_list ToolChain::getStdlibPaths() const {
   path_list Paths;
+
+  // Check for configure-time system library directories.
+  StringRef ClangSystemLibraryDirs(CLANG_SYSTEM_LIBRARY_DIRS);
+  if (ClangSystemLibraryDirs != "") {
+    SmallVector<StringRef, 5> dirs;
+    ClangSystemLibraryDirs.split(dirs, ":");
+    for (StringRef dir : dirs) {
+      Paths.push_back(std::string(dir));
+    }
+    return Paths;
+  }
+
   SmallString<128> P(D.Dir);
   llvm::sys::path::append(P, "..", "lib", getTripleString());
   Paths.push_back(std::string(P.str()));
diff --git a/clang/lib/Driver/ToolChains/Linux.cpp b/clang/lib/Driver/ToolChains/Linux.cpp
index 1ba222bf8..0c9665e7d 100644
--- a/clang/lib/Driver/ToolChains/Linux.cpp
+++ b/clang/lib/Driver/ToolChains/Linux.cpp
@@ -421,6 +421,12 @@ std::string Linux::computeSysRoot() const {
 }
 
 std::string Linux::getDynamicLinker(const ArgList &Args) const {
+  // Check for configure-time dynamic linker.
+  StringRef ClangDynamicLinker(CLANG_DYNAMIC_LINKER);
+  if (ClangDynamicLinker != "") {
+    return ClangDynamicLinker.str();
+  }
+
   const llvm::Triple::ArchType Arch = getArch();
   const llvm::Triple &Triple = getTriple();
 
@@ -629,6 +635,31 @@ void Linux::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
   if (DriverArgs.hasArg(options::OPT_nostdlibinc))
     return;
 
+  // Check for configure-time system include directories.
+  StringRef ClangSystemCIncludeDirs(CLANG_SYSTEM_C_INCLUDE_DIRS);
+  StringRef ClangSystemCXXIncludeDirs(CLANG_SYSTEM_CXX_INCLUDE_DIRS);
+  if (ClangSystemCIncludeDirs != "" || ClangSystemCXXIncludeDirs != "") {
+    // Add C++ include directories, unless -nostdinc++ is given
+    // C++ headers always comes before C headers.
+    if (ClangSystemCXXIncludeDirs != "" && D.CCCIsCXX() &&
+        !DriverArgs.hasArg(options::OPT_nostdincxx)) {
+      SmallVector<StringRef, 5> dirs;
+      ClangSystemCXXIncludeDirs.split(dirs, ":");
+      for (StringRef dir : dirs) {
+        addSystemInclude(DriverArgs, CC1Args, dir);
+      }
+    }
+    // Add C include directories
+    if (ClangSystemCIncludeDirs != "") {
+      SmallVector<StringRef, 5> dirs;
+      ClangSystemCIncludeDirs.split(dirs, ":");
+      for (StringRef dir : dirs) {
+        addSystemInclude(DriverArgs, CC1Args, dir);
+      }
+    }
+    return;
+  }
+
   // LOCAL_INCLUDE_DIR
   addSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/usr/local/include"));
   // TOOL_INCLUDE_DIR
